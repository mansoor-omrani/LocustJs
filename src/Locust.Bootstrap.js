(function (w) {
	function __error(msg) {
		if (w.console && w.console.log) {
			console.log(msg);
		} else {
			throw msg;
		}
	};
	if (!w) {
        throw "Locust.Bootstrap: no context given (use 'Locust.Base.js')";
    }
    if (!w.Locust) {
		__error("Locust.Bootstrap: Locust namespace not found (use 'Locust.Base.js')");
		return;
    }
	
    var __modal_cnt = 0;
    var __btn_cnt = 0;

    function _validateDisplay(display) {
        return display == "default" || display == "primary" || display == "success" || display == "info" || display == "danger" || display == "warning";
    }
    function _validateSize(size) {
        return size == "xs" || size == "sm" || size == "lg";
    }
    function __createButton(config) {
        var result = "";
        var _config = $.extend({
            id: "",
            autoid: false,
            text: "Submit",
            title: "",
            display: "default",     // default, primary, success, info, danger, warning
            size: "",               // xs, sm, lg
            "class": "",
            style: "",
            type: "button"          // button, submit
        }, config);

        var autoGeneratedId = false;
        var __id = "";

        if (_config.id) {
            if ($("#" + _config.id).length && _config.autoid) {
                _config.id += __btn_cnt++;
                autoGeneratedId = true;
            }

            __id = " id='" + _config.id + "'";
        }

        if (_validateDisplay(_config.display)) {
            _config.display = " btn-" + _config.display;
        }
        if (_validateSize(_config.size)) {
            _config.size = " btn-" + _config.size;
        }
        if (_config.style) {
            _config.style = " style=\"" + _config.style + "\"";
        }
        if (_config.type) {
            _config.type = " type=\"" + _config.type + "\"";
        }
        if (_config.title) {
            _config.title = " title=\"" + _config.title + "\"";
        }
        if (_config["class"]) {
            _config["class"] = " " + _config["class"];
        }

        var _other_attributes = "";

        for (var key in _config) {
            if (_config.hasOwnProperty(key)) {
                _other_attributes += key + "=\"" + _config[key] + "\"";
            }
        };

        result += "<button" + __id + " class=\"btn" + _config.display + _config.size + _config["class"] + "\" " + _config.style + _config.type + _config.title + _other_attributes + ">" + _config.text + "</button>";

        return { html: result, autoGeneratedId: autoGeneratedId, id: _config.id };
    }
    function __createModal(config) {
        var result = "";
        var _config = $.extend({
            id: "",
            autoid: false,
            title: "",
            body: "",
            footer: "",
            size: "",
            keyboard: true
        }, config);

        var autoGeneratedId = false;

        if (!_config.id) {
            _config.id = "modal-" + __modal_cnt++;
            autoGeneratedId = true;
        } else {
            if ($("#" + _config.id).length && _config.autoid) {
                _config.id += __modal_cnt++;
                autoGeneratedId = true;
            }
        }

        _config.size = (_validateSize(_config.size)) ? "modal-" + _config.size : "";

        result =
"<div id='" + _config.id + "' class='modal fade' tabindex='-1' role='dialog' aria-labelledby='" + _config.id + "Label'>" +
"	<div class='modal-dialog " + _config.size + "' role='document'>" +
"		<div class='modal-content'>" +
"			<div class='modal-header'>" +
"				<button type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>×</span></button>" +
"				<h4 class='modal-title'>{" + _config.title + "}</h4>" +
"			</div>" +
"			<div class='modal-body'>" +
"				<p>" + _config.body + "</p>" +
"			</div>" +
"			<div class='modal-footer" + (_config.footer ? "" : " hidden") + "'>" +
"				" + _config.footer +
"			</div>" +
"		</div>" +
"	</div>" +
"</div>";

        return { html: result, autoGeneratedId: autoGeneratedId, id: _config.id };
    }
    function __appendModal(_config) {
        var result = { };
        
        if ($("#" + _config.id).length == 0) {
            result = __createModal(_config);

            $("body").append(result.html);

            result.alreadyCreated = false;
        } else {
            result.alreadyCreated = true;
        }

        return result;
    }

    function __prepareModal(_config) {
        $("#" + _config.id + " h4.modal-title").html(_config.title);
        $("#" + _config.id + " div.modal-body").html(_config.content);
        $("#" + _config.id + " div.modal-footer").removeClass("hidden").html(_config.footer);

        $("#" + _config.id).modal({
            backdrop: _config.backdrop,
            keyboard: _config.keyboard
        });
    }

    if (!w.$$.Bootstrap) {
        w.$$.Bootstrap = {};
    }
    if (!w.$$.Bootstrap.confirm || typeof w.$$.Bootstrap.confirm != "function") {
        w.$$.Bootstrap.confirm = function (config) {
            function _processButtonsString(buttons) {
                var _result = "";
                var arr = buttons.split(',');

                $(arr).each(function (i, item) {
                    var _props = item.split(':');
                    var _txt = _props[0].trim();

                    if (_props.length > 1) {
                        var _id = "";
                        var _display = "default";
                        var _size = "";
                        var _dismiss = "";

                        $(_props).each(function (i, x) {
                            x = x.trim();

                            if (x == "xs" || x == "sm" || x == "lg") {
                                _size = x;
                            } else if (x == "default" || x == "primary" || x == "info" || x == "success" || x == "danger" || x == "warning") {
                                _display = x;
                            } else if (x == "dismiss") {
                                _dismiss = "modal";
                            } else {
                                _id = x;
                            }
                        });
                    }
                    
                    _result += __createButton({ text: _txt, id: _id, display: _display, size: _size, "data-dismiss": _dismiss }).html;
                });

                return _result;
            }
            var _config = $.extend({
                id: "",
                title: "",
                body: "",
                size: "",
                buttons: "",
                footer: "",
                keyboard: false,
                backdrop: 'static'
            }, config);

            if (_config.buttons) {
                if (typeof _config.buttons == "string") {
                    _config.footer = _processButtonsString(_config.buttons);
                } else if ($.isArray(_config.buttons)) {
                    _config.footer = "";
                    $(_config.buttons).each(function (i, btn) {
                        _config.footer += __createButton(btn).html;
                    });
                }
            }

            var result = __appendModal(_config);

            __prepareModal(_config);

            return result;
        }
    }

    if (!w.$$.Bootstrap.modal || typeof w.$$.Bootstrap.modal != "function") {
        w.$$.Bootstrap.modal = function (config) {
            var _config = $.extend({
                id: "",
                title: "",
                body: "",
                footer: "",
                size: "",
                keyboard: true
            }, config);

            var result = __appendModal(_config);

            __prepareModal(_config);

            return result;
        }
    }

    if (!w.$$.Bootstrap.Button || typeof w.$$.Bootstrap.Button != "function") {
        w.$$.Bootstrap.Button = __createButton;
    }
    if (!w.$$.Bootstrap.Modal || typeof w.$$.Bootstrap.Modal != "function") {
        w.$$.Bootstrap.Modal = __createModal;
    }

    // ------------ fix multiple modals ----------------
	// solution 1
    // source:	https://www.bootply.com/elez9J62fk
    $(document).on('show.bs.modal', '.modal', function () {
        var zIndex = calculateZIndex();

        $(this).css('z-index', zIndex);

        setTimeout(function () {
            $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
        }, 0);
    })
    $(document).on('hidden.bs.modal', '.modal', function () {
        $('.modal:visible').length && $(document.body).addClass('modal-open');
    })
    function calculateZIndex() {
        var zIndex = Math.max.apply(null, Array.prototype.map.call(document.querySelectorAll('*'), function (el) {
            return +el.style.zIndex;
        })) + 10;

        return zIndex;
    }
})(__locustMainContext);
